description   "rtorrent"
author        "periwinklepreacher"

# Default start-stop. These events are generated by openvpn torrent-up.sh
# and torrent-down.sh scripts
start on torrent-up
stop on torrent-down

# Restart daemon on crash, limit to 2 restarts in 10 secs
respawn
respawn limit 10 10

# Upstart will expect the process executed to call fork(2) exactly twice.
expect daemon

# Change to the user and group before running the job's process. HOME must
# be defined and exported for rtorrent to find ~/.torrent.rc
setuid rakshasa
setgid sambashare
env USER=rakshasa
env HOME=/home/rakshasa

# These environment variables are assigned by the event emitter
# (i.e., initctl emit torrent-up RT_IPV4=10.10.10.10 RT_DEVICE=tun0)
env RT_LOGIN
env RT_CLIENTID
env RT_IPV4
env RT_DEVICE

# RTorrent may take some time to stop
kill signal SIGINT
kill timeout 15

# Write errors into the logfile.
console log

pre-start script
    log ( ) { logger "${UPSTART_JOB}[${UPSTART_EVENTS}]: $1"; }
    log "pre-start script"

    if [ ! -z `pgrep -u "${USER}" rtorrent` ]; then
        log "Detected running rtorrent process for ${USER}. Shutting it down."
        killall --wait rtorrent
    fi

    export RT_CONFIG="${HOME}/.rtorrent.rc"
    if [ ! -r "${RT_CONFIG}" ] ; then 
        log "Cannot find or read file ${RT_CONFIG}"
        exit 2
    fi

    export RT_SESSION=`grep "^[[:space:]]*session[[:space:]]*=" ${RT_CONFIG} | \
                       sed "s/^[[:space:]]*session[[:space:]]*=[[:space:]]*//"`
    if [ ! -d "${RT_SESSION}" ] ; then
        log "Cannot find session directory or not defined in ${RT_CONFIG}"
        exit 2
    fi

    export RT_SCGI=`grep "^[[:space:]]*scgi_port[[:space:]]*=" ${RT_CONFIG} | \
                    sed "s/^[[:space:]]*scgi_port[[:space:]]*=[[:space:]]*//"`
    if [ -z "${RT_SCGI}" ]; then
        log "No scgi_port defined in config ${RT_CONFIG}"
        exit 2
    fi

    export RT_LOCK="${RT_SESSION}/rtorrent.lock"
    if [ -f "${RT_LOCK}" ]; then
        log "Removing stale ${RT_LOCK} file."
        rm -f "${RT_LOCK}"
    fi

    export RT_DTACH="/tmp/rtorrent.dtach"
    if [ -f "${RT_DTACH}" ]; then
        log "Removing stale ${RT_DTACH} file."
        rm -f "${RT_DTACH}"
    fi

    export RT_BIND=`ip route get 8.8.8.8 oif ${RT_DEVICE} 2>/dev/null | \
                   awk '/src/ { print $5 }'`
    if [ ! "${RT_BIND}" = "${RT_IPV4}" ]; then
        log "Cannot verify address ${RT_IPV4} on ${RT_DEVICE}"
        exit 2
    fi
end script

# Don't add anything in here that isn't a built-in command otherwise upstart
# will lose track of the process ID that it thinks belongs to this job. As a
# rule it almost never recovers nicely and will become unstable.

script
    chdir /home/${USER}
    exec /usr/bin/dtach -n /tmp/rtorrent.dtach /usr/bin/rtorrent -b ${RT_IPV4}
end script

post-stop script
    log ( ) { logger "${UPSTART_JOB}[${UPSTART_EVENTS}]: $1"; }
    log "post-stop script"

    if [ -f "${RT_LOCK}" ]; then
        RT_PID=`awk -F+ "{ print $2 }" ${RT_LOCK}`
        log "Sending INT signal to process ${RT_PID}"
        kill -INT "${RT_PID}"
    fi

    if [ -f "${RT_LOCK}" ]; then
        log "Removing stale ${RT_LOCK} file"
        rm -f "${RT_LOCK}"
    fi

    if [ -f "${RT_DTACH}" ]; then
        log "Removing ${RT_DTACH} file"
        rm -f "${RT_DTACH}"
    fi
end script
